<?xml version='1.0'?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<configuration 
  xmlns="urn:activemq" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
  <core 
    xmlns="urn:activemq:core" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq:core ">
    <name>ngss-broker-cluster</name>
    <persistence-enabled>true</persistence-enabled>
    <!-- this could be ASYNCIO, MAPPED, NIO
           ASYNCIO: Linux Libaio
           MAPPED: mmap files
           NIO: Plain Java Files
       -->
    <security-enabled>false</security-enabled>
    <journal-type>NIO</journal-type>
    <scheduled-thread-pool-max-size>50</scheduled-thread-pool-max-size>
    <message-expiry-thread-priority>5</message-expiry-thread-priority>
    <message-expiry-scan-period>5000</message-expiry-scan-period>    
<!-- NFSv4 (shared store) journal directories. These must be the same for each live-backup group  -->
    <paging-directory>/mnt/sharednfs/broker1/data/paging</paging-directory>
    <bindings-directory>/mnt/sharednfs/broker1/data/bindings</bindings-directory>
    <journal-directory>/mnt/sharednfs/broker1/data/journal</journal-directory>
    <large-messages-directory>/mnt/sharednfs/broker1/data/large-messages</large-messages-directory>
    <!-- This forces the journal to write before message is acknowledged -->
    <journal-datasync>true</journal-datasync>
    <journal-min-files>2</journal-min-files>
    <journal-pool-files>100</journal-pool-files>
    <journal-file-size>10M</journal-file-size>
    <journal-buffer-timeout>13333333</journal-buffer-timeout>
    <journal-buffer-size>2000K</journal-buffer-size>
    <!--
        When using ASYNCIO, this will determine the writing queue depth for libaio.
       -->
    <journal-max-io>1</journal-max-io>
    <!--
        You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
         <network-check-NIC>theNicName</network-check-NIC>
        -->
    <!--
        Use this to use an HTTP server to validate the network
         <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->
    <!-- <network-check-period>10000</network-check-period> -->
    <!-- <network-check-timeout>1000</network-check-timeout> -->
    <!-- this is a comma separated list, no spaces, just DNS or IPs
           it should accept IPV6

           Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
                    Using IPs that could Eventually disappear or be partially visible may defeat the purpose.
                    You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
    <!-- <network-check-list>10.0.0.1</network-check-list> -->
    <!-- use this to customize the ping used for ipv4 addresses -->
    <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->
    <!-- use this to customize the ping used for ipv6 addresses -->
    <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->
    <!-- how often we are looking for how many bytes are being used on the disk in ms -->
    <disk-scan-period>5000</disk-scan-period>
    <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
           that won't support flow control. -->
    <!--max-disk-usage>90</max-disk-usage-->
    <max-disk-usage>99</max-disk-usage>
    <!-- should the broker detect dead locks and other issues -->
    <critical-analyzer>true</critical-analyzer>
    <critical-analyzer-timeout>120000</critical-analyzer-timeout>
    <critical-analyzer-check-period>60000</critical-analyzer-check-period>
    <critical-analyzer-policy>HALT</critical-analyzer-policy>
    <global-max-size>4000Mb</global-max-size>
    <!-- Max size of threadpool. Unlimited is recommended. -->
    <thread-pool-max-size>-1</thread-pool-max-size>
    <acceptors>
      <!-- useEpoll means: it will use Netty epoll if you are on a system (Linux) that supports it -->
      <!-- amqpCredits: The number of credits sent to AMQP producers -->
      <!-- amqpLowCredits: The server will send the # credits specified at amqpCredits at this low mark -->
      <!-- Acceptor for CORE protocol (used for inter-cluster communication -->
      <acceptor name="artemis">tcp://0.0.0.0:61616?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300;directDeliver=false;batchDelay=10</acceptor>
      <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
      <!-- The "directDeliver" param causes the broker to use the same thread for accepting and processing. For improved throughput at a small latency cost, we set it to false. -->
      <!-- The "batchDelay" param delays writing to a socket for for the specified amount of milliseconds, increasing throughput at the cost of latency. -->
      <acceptor name="amqp">tcp://0.0.0.0:5672?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300;directDeliver=false;batchDelay=10</acceptor>
    </acceptors>
    <!-- Connectors for this and other brokers in the cluster. -->
    <connectors>
<!--
      <connector name="broker1-connector">tcp://10.1.21.82:61616</connector>
      <connector name="broker2-connector">tcp://10.1.21.83:61616</connector>
      <connector name="broker3-connector">tcp://10.1.21.84:61616</connector>
      <connector name="broker4-connector">tcp://10.1.21.85:61616</connector>
      <connector name="broker5-connector">tcp://10.1.21.86:61616</connector>
      <connector name="broker6-connector">tcp://10.1.21.87:61616</connector>
-->
      <connector name="broker1-connector">tcp://192.168.2.221:61616</connector>
      <connector name="broker2-connector">tcp://192.168.2.221:61626</connector>
      <connector name="broker3-connector">tcp://192.168.2.221:61636</connector>
    </connectors>
    <!-- credentials for the cluster. Must be the same in all cluster members -->
    <cluster-user>admin</cluster-user>
    <cluster-password>password</cluster-password>
    <!-- Cluster configuration -->
    <cluster-connections>
      <cluster-connection name="preprod">
        <connector-ref>broker1-connector</connector-ref>
        <retry-interval>500</retry-interval>
        <use-duplicate-detection>true</use-duplicate-detection>
        <!-- This is the only message load balancing scheme that supports message redistribution. Do not change this setting. -->
        <message-load-balancing>ON_DEMAND</message-load-balancing>
        <static-connectors allow-direct-connections-only="true">
          <connector-ref>broker2-connector</connector-ref>
          <connector-ref>broker3-connector</connector-ref>
<!--
          <connector-ref>broker4-connector</connector-ref>
          <connector-ref>broker5-connector</connector-ref>
          <connector-ref>broker6-connector</connector-ref>
-->
        </static-connectors>
      </cluster-connection>
    </cluster-connections>
    <!-- This is the default master node within it's live-backup group. -->
          <!-- Failover to the slave will occur even on graceful shutdown. -->
<!--
    <ha-policy>
      <shared-store>
        <master>
          <failover-on-shutdown>true</failover-on-shutdown>
        </master>
      </shared-store>
    </ha-policy>
-->
      <!-- catch all -->
      <security-settings>
         <security-setting match="#">
            <permission type="createNonDurableQueue" roles="amq"/>
            <permission type="deleteNonDurableQueue" roles="amq"/>
            <permission type="createDurableQueue" roles="amq"/>
            <permission type="deleteDurableQueue" roles="amq"/>
            <permission type="createAddress" roles="amq"/>
            <permission type="deleteAddress" roles="amq"/>
            <permission type="consume" roles="amq"/>
            <permission type="browse" roles="amq"/>
            <permission type="send" roles="amq"/>
            <!-- we need this otherwise ./artemis data imp wouldn't work -->
            <permission type="manage" roles="amq"/>
         </security-setting>
      </security-settings>
	   
    <address-settings>
      <!-- management addresses -->
      <!-- if you define auto-create on certain queues, management has to be auto-create -->
      <address-setting match="activemq.management#">
        <dead-letter-address>DLQ</dead-letter-address>
        <expiry-address>ExpiryQueue</expiry-address>
        <redelivery-delay>10</redelivery-delay>
        <!-- with -1 only the global-max-size is in use for limiting -->
        <max-size-bytes>-1</max-size-bytes>
        <message-counter-history-day-limit>10</message-counter-history-day-limit>
        <address-full-policy>PAGE</address-full-policy>
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>true</auto-create-addresses>
        <auto-create-jms-queues>true</auto-create-jms-queues>
        <auto-create-jms-topics>true</auto-create-jms-topics>
      </address-setting>
      <!-- cluster and internal addresses -->
        <!-- with -1 only the global-max-size is in use for limiting -->
      <address-setting match="$.artemis.internal#">
        <max-delivery-attempts>5</max-delivery-attempts>
	<redelivery-delay>0</redelivery-delay>
        <redistribution-delay>-1</redistribution-delay>
        <max-size-bytes>-1</max-size-bytes>
        <message-counter-history-day-limit>10</message-counter-history-day-limit>
        <address-full-policy>PAGE</address-full-policy>
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>true</auto-create-addresses>
        <auto-create-jms-queues>true</auto-create-jms-queues>
        <auto-create-jms-topics>true</auto-create-jms-topics>
      </address-setting>
      <!--default for catch all-->
      <address-setting match="#">
        <dead-letter-address>DLQ</dead-letter-address>
        <expiry-address>ExpiryQueue</expiry-address>
        <redelivery-delay>1000</redelivery-delay>
        <redelivery-delay-multiplier>2</redelivery-delay-multiplier>
        <max-delivery-attempts>10</max-delivery-attempts>
        <!-- The delay before messages are redistributed to other cluster memebers if no matching consumers are available in ms.
          A small value here improves throughput at the cost of latency. -->
        <redistribution-delay>0</redistribution-delay>
        <!-- with -1 only the global-max-size is in use for limiting -->
        <max-size-bytes>-1</max-size-bytes>
        <message-counter-history-day-limit>10</message-counter-history-day-limit>
        <address-full-policy>PAGE</address-full-policy>
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>true</auto-create-addresses>
        <auto-create-jms-queues>true</auto-create-jms-queues>
        <auto-create-jms-topics>true</auto-create-jms-topics>
      </address-setting>
      <!-- dispatcher -->
      <!--address-setting match="dispatcher.#">
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>false</auto-create-addresses>
        <auto-create-jms-queues>false</auto-create-jms-queues>
        <auto-create-jms-topics>false</auto-create-jms-topics>
      </address-setting-->
      <!-- backplane -->
      <!--address-setting match="backplane.#">
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>true</auto-create-addresses>
        <auto-create-jms-queues>false</auto-create-jms-queues>
        <auto-create-jms-topics>false</auto-create-jms-topics>
      </address-setting-->
      <!-- application messaging -->
        <!-- Forward messages to DLA when no queues subscribing. -->
      <!--address-setting match="event.#">
        <auto-create-queues>true</auto-create-queues>
        <auto-create-addresses>true</auto-create-addresses>
        <auto-create-jms-queues>true</auto-create-jms-queues>
        <auto-create-jms-topics>true</auto-create-jms-topics>
        <send-to-dla-on-no-route>true</send-to-dla-on-no-route>
      </address-setting-->
    </address-settings>
    <!-- addresses -->
    <addresses>
    <address name="dispatcher.subscriptionchanged">
	<multicast></multicast>
    </address>
    <address name="dispatcher.subscriptionconnectionchanged">
        <multicast></multicast>
    </address>
    <address name="dispatcher.dcfailover">
        <multicast></multicast>
    </address>
<address name="event.test.integration"><multicast></multicast></address>

    <address name="ExpiryQueue">
        <anycast>
          <queue name="ExpiryQueue" />
        </anycast>
      </address>
    <address name="DLQ">
        <anycast>
          <queue name="DLQ" />
        </anycast>
      </address>


      <address name="event.test">
        <multicast></multicast>
      </address>
      <address name="event.productAdded">
        <multicast></multicast>
      </address>
      <address name="event.productRemoved">
        <multicast></multicast>
      </address>
      <address name="event.productEdited">
        <multicast></multicast>
      </address>
      <address name="event.couponAdded">
        <multicast></multicast>
      </address>
      <address name="event.couponRemoved">
        <multicast></multicast>
      </address>
      <address name="event.paymentStarted">
        <multicast></multicast>
      </address>
      <address name="event.paymentAuthorized">
        <multicast></multicast>
      </address>
      <address name="event.payment.Complete">
        <multicast></multicast>
      </address>
      <address name="event.paymentError">
        <multicast></multicast>
      </address>
      <address name="event.orderSubmitted">
        <multicast></multicast>
      </address>
      <address name="event.orderAccepted">
        <multicast></multicast>
      </address>
      <address name="event.orderEdited">
        <multicast></multicast>
      </address>
      <address name="event.orderCancelled">
        <multicast></multicast>
      </address>
      <address name="event.orderPaid">
        <multicast></multicast>
      </address>
      <address name="event.orderComplete">
        <multicast></multicast>
      </address>
      <address name="event.orderOnMakeline">
        <multicast></multicast>
      </address>
      <address name="event.orderInOven">
        <multicast></multicast>
      </address>
      <address name="event.orderBeingChecked">
        <multicast></multicast>
      </address>
      <address name="event.orderReady">
        <multicast></multicast>
      </address>
      <address name="event.productBumped">
        <multicast></multicast>
      </address>
      <address name="event.deliveryDispatched">
        <multicast></multicast>
      </address>
      <address name="event.driverCheckBackIn">
        <multicast></multicast>
      </address>
      <address name="event.driverLeavingStore">
        <multicast></multicast>
      </address>
      <address name="event.driverApproachingCustomer">
        <multicast></multicast>
      </address>
      <address name="event.driverAtCustomer">
        <multicast></multicast>
      </address>
      <address name="event.driverReturning">
        <multicast></multicast>
      </address>
      <address name="event.loyaltyOrderProcessed">
        <multicast></multicast>
      </address>
      <address name="event.loyaltyPointsReconciled">
        <multicast></multicast>
      </address>
      <!-- test events -->
      <address name="event.test.testEvent">
        <multicast></multicast>
      </address>
      <address name="event.test.productAdded">
        <multicast></multicast>
      </address>
      <address name="event.test.productRemoved">
        <multicast></multicast>
      </address>
      <address name="event.test.productEdited">
        <multicast></multicast>
      </address>
      <address name="event.test.couponAdded">
        <multicast></multicast>
      </address>
      <address name="event.test.couponRemoved">
        <multicast></multicast>
      </address>
      <address name="event.test.paymentStarted">
        <multicast></multicast>
      </address>
      <address name="event.test.paymentAuthorized">
        <multicast></multicast>
      </address>
      <address name="event.test.payment.Complete">
        <multicast></multicast>
      </address>
      <address name="event.test.paymentError">
        <multicast></multicast>
      </address>
      <address name="event.test.orderSubmitted">
        <multicast></multicast>
      </address>
      <address name="event.test.orderAccepted">
        <multicast></multicast>
      </address>
      <address name="event.test.orderEdited">
        <multicast></multicast>
      </address>
      <address name="event.test.orderCancelled">
        <multicast></multicast>
      </address>
      <address name="event.test.orderPaid">
        <multicast></multicast>
      </address>
      <address name="event.test.orderComplete">
        <multicast></multicast>
      </address>
      <address name="event.test.orderOnMakeline">
        <multicast></multicast>
      </address>
      <address name="event.test.orderInOven">
        <multicast></multicast>
      </address>
      <address name="event.test.orderBeingChecked">
        <multicast></multicast>
      </address>
      <address name="event.test.orderReady">
        <multicast></multicast>
      </address>
      <address name="event.test.productBumped">
        <multicast></multicast>
      </address>
      <address name="event.test.deliveryDispatched">
        <multicast></multicast>
      </address>
      <address name="event.test.driverCheckBackIn">
        <multicast></multicast>
      </address>
      <address name="event.test.driverLeavingStore">
        <multicast></multicast>
      </address>
      <address name="event.test.driverApproachingCustomer">
        <multicast></multicast>
      </address>
      <address name="event.test.driverAtCustomer">
        <multicast></multicast>
      </address>
      <address name="event.test.driverReturning">
        <multicast></multicast>
      </address>
      <address name="event.test.loyaltyOrderProcessed">
        <multicast></multicast>
      </address>
      <address name="event.test.loyaltyPointsReconciled">
        <multicast></multicast>
      </address>
      <address name="orders">
         <multicast>
            <queue name="test:global"/>
         </multicast>
      </address>
    </addresses>
  </core>
</configuration>
